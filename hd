s3 = boto3.client('s3')

def download_file_from_s3(s3_key, local_path):
    try:
        os.makedirs(os.path.dirname(local_path), exist_ok=True)
        s3.download_file(S3_BUCKET_NAME, s3_key, local_path)
        return True
    except Exception as e:
        print(f"Error downloading {s3_key}: {e}")
        return False

def upload_crops_to_s3(local_crop_dir, s3_prefix):
    uploaded_files = []
    for filename in os.listdir(local_crop_dir):
        local_file_path = os.path.join(local_crop_dir, filename)
        if os.path.isfile(local_file_path):
            s3_upload_key = s3_prefix + filename
            try:
                s3.upload_file(local_file_path, S3_BUCKET_NAME, s3_upload_key)
                uploaded_files.append(s3_upload_key)
            except Exception as e:
                print(f"Error uploading {filename}: {e}")
    return uploaded_files

def clean_s3_key(file_upload_value):
    if not file_upload_value:
        return None
    filename_with_hash = os.path.basename(file_upload_value)
    match = re.search(r'-', filename_with_hash)
    return filename_with_hash[match.end():] if match else filename_with_hash

def normalize_to_pixels(normalized_x, normalized_y, original_width, original_height):
    pixel_x = int(normalized_x * original_width / 100.0)
    pixel_y = int(normalized_y * original_height / 100.0)
    return (pixel_x, pixel_y)

def process_annotations(annotations_file):
    os.makedirs(LOCAL_DOWNLOAD_DIR, exist_ok=True)
    os.makedirs(LOCAL_CROP_DIR, exist_ok=True)
    with open(annotations_file, 'r') as f:
        tasks_data = json.load(f)
    total_crops_uploaded = 0

    for task in tasks_data:
        s3_path_full = task.get('file_upload')
        if not s3_path_full:
            continue
        s3_key = clean_s3_key(s3_path_full)
        if not s3_key:
            continue
        local_image_path = os.path.join(LOCAL_DOWNLOAD_DIR, s3_key)

        pole_locations_pixels = []
        original_width, original_height = None, None
        annotations = task.get('annotations', [])
        if not annotations or not annotations[0].get('result'):
            continue

        for result in annotations[0]['result']:
            if original_width is None:
                original_width = result.get('original_width')
                original_height = result.get('original_height')
            value = result.get('value', {})
            labels = value.get('rectanglelabels', [])
            if original_width and 'Pole' in labels and 'x' in value:
                center_x_normalized = value['x'] + (value['width'] / 2)
                center_y_normalized = value['y'] + (value['height'] / 2)
                pixel_center_x, pixel_center_y = normalize_to_pixels(
                    center_x_normalized, center_y_normalized, original_width, original_height
                )
                pole_locations_pixels.append((pixel_center_x, pixel_center_y))

        if not pole_locations_pixels:
            continue

        if download_file_from_s3(s3_key, local_image_path):
            for f in os.listdir(LOCAL_CROP_DIR):
                os.remove(os.path.join(LOCAL_CROP_DIR, f))
            crop_around_poles(
                image_path=local_image_path,
                pole_locations=pole_locations_pixels,
                crop_size=CROP_SIZE_PIXELS,
                output_dir=LOCAL_CROP_DIR
            )
            uploaded = upload_crops_to_s3(LOCAL_CROP_DIR, S3_CROPS_PREFIX)
            total_crops_uploaded += len(uploaded)
            os.remove(local_image_path)
            
    print(f"\nâœ… Processing complete. Total crops uploaded to S3: {total_crops_uploaded}")

if __name__ == "__main__":
    if download_file_from_s3(S3_ANNOTATIONS_KEY, LOCAL_ANNOTATIONS_FILE):
        process_annotations(LOCAL_ANNOTATIONS_FILE)
    else:
        print("Failed to download annotations file from S3.")
